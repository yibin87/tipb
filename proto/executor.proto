syntax = "proto2";

package tipb;

option java_multiple_files = true;
option java_package = "com.pingcap.tidb.tipb";

import "expression.proto";
import "schema.proto";
import "gogoproto/gogo.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;

enum ExecType {
	TypeTableScan = 0;
	TypeIndexScan = 1;
	TypeSelection = 2;
	TypeAggregation = 3; // TODO: Rename it to hash aggregation after support stream aggregation in TiKV.
	TypeTopN = 4;
	TypeLimit = 5;
	TypeStreamAgg = 6;
	TypeJoin = 7;
	TypeKill = 8;
	TypeExchangeSender = 9;
	TypeExchangeReceiver = 10;
	TypeProjection = 11;
	TypePartitionTableScan = 12;
	TypeSort = 13;
	TypeWindow = 14;
	TypeExpand = 15;   // Expand executor is used to expand underlying data sources to feed different grouping sets.
	TypeExpand2 = 16;   // Expand2 executor is used to expand underlying data sources to feed different grouping sets.
}

// It represents a Executor.
message Executor {
	optional ExecType tp = 1 [(gogoproto.nullable) = false];
	optional TableScan tbl_scan = 2;
	optional IndexScan idx_scan = 3;
	optional Selection selection = 4;
	optional Aggregation aggregation = 5;
	optional TopN topN = 6;
	optional Limit limit = 7;
	optional ExchangeReceiver exchange_receiver = 8;
	optional Join join = 9;
	optional string executor_id = 10;
	optional Kill kill = 11;
	optional ExchangeSender exchange_sender = 12;
	optional Projection Projection = 13;
	optional PartitionTableScan partition_table_scan = 14;
	optional Sort sort = 15;
	optional Window window = 16;
	optional uint64 fine_grained_shuffle_stream_count = 17 [(gogoproto.nullable) = false];
	optional uint64 fine_grained_shuffle_batch_size = 18 [(gogoproto.nullable) = false];
	optional Expand expand = 19;
	optional Expand2 expand2= 20;
}

enum ExchangeType {
	PassThrough = 0;
	Broadcast = 1;
	Hash = 2;
}

// Data compression mode
enum CompressionMode {
	NONE = 0; // no compression
	FAST = 1; // fast compression/decompression speed, compression ratio is lower than HC mode
	HIGH_COMPRESSION = 2; // high compression (HC) ratio mode
}

// ExchangeSender will build connection with ExchangeReceiver.
message ExchangeSender {
	optional ExchangeType tp = 1 [(gogoproto.nullable) = false];
	repeated bytes encoded_task_meta = 2;
	repeated Expr partition_keys = 3;
	optional Executor child = 4;
	repeated FieldType types = 5;  // partition keys' types
	repeated FieldType all_field_types = 6;
	optional CompressionMode compression = 7 [(gogoproto.nullable) = false];
	repeated EncodedBytesSlice upstream_cte_task_meta = 8;
}

message EncodedBytesSlice {
	repeated bytes encoded_tasks = 1;
}

// ExchangeReceiver accept connection and receiver data from ExchangeSender.
message ExchangeReceiver {
	repeated bytes encoded_task_meta = 1;
	repeated FieldType field_types = 2;
	optional ExchangeType tp = 3;
	repeated bytes original_cte_prdocuer_task_meta = 4;
}

enum EngineType {
	Local = 0;
	TiKV = 1;
	TiFlash = 2;
}

message TableScan {
	optional int64 table_id = 1 [(gogoproto.nullable) = false];
	repeated ColumnInfo columns = 2;
	optional bool desc = 3 [(gogoproto.nullable) = false];
	repeated int64 primary_column_ids = 4;
	optional EngineType next_read_engine = 5 [(gogoproto.nullable) = false]; // which engine we should in next step, only used by tiflash
	repeated KeyRange ranges = 6 [(gogoproto.nullable) = false]; // For global read in join, we must point out the key ranges when we don't have the region info.
	repeated int64 primary_prefix_column_ids = 7;
	optional bool keep_order = 8;
	optional bool is_fast_scan = 9; // fast_scan is a feature only provided by TiFlash (but not TiKV).
	repeated Expr pushed_down_filter_conditions = 10; // conditions that are pushed down to storage layer, only used by TiFlash.
	repeated RuntimeFilter runtime_filter_list = 11; // only used by TiFlash
	optional int32 max_wait_time_ms = 12  [(gogoproto.nullable) = false];
}

message PartitionTableScan {
	optional int64 table_id = 1 [(gogoproto.nullable) = false];
	repeated ColumnInfo columns = 2;
	optional bool desc = 3 [(gogoproto.nullable) = false];
	repeated int64 primary_column_ids = 4;
	repeated int64 primary_prefix_column_ids = 5;
	repeated int64 partition_ids = 6;
	optional bool is_fast_scan = 7; // fast_scan is a feature only provided by TiFlash (but not TiKV).
	repeated Expr pushed_down_filter_conditions = 8; // conditions that are pushed down to storage layer, only used by TiFlash.
	repeated RuntimeFilter runtime_filter_list = 9; // only used by TiFlash
        optional int32 max_wait_time_ms = 10  [(gogoproto.nullable) = false];
}

enum JoinType {
	TypeInnerJoin = 0;
	TypeLeftOuterJoin = 1;
	TypeRightOuterJoin = 2;
	TypeSemiJoin = 3;
	TypeAntiSemiJoin = 4;
	TypeLeftOuterSemiJoin = 5;
	TypeAntiLeftOuterSemiJoin = 6;
}

enum JoinExecType {
	TypeHashJoin = 0;
}

message Join {
	optional JoinType join_type = 1 [(gogoproto.nullable) = false];
	optional JoinExecType join_exec_type = 2 [(gogoproto.nullable) = false];
	repeated Executor children = 3;
	optional int64 inner_idx = 4 [(gogoproto.nullable) = false]; // 0 or 1
	repeated Expr left_join_keys = 5;
	repeated Expr right_join_keys = 6;
	// used by TiFlash join when new collation is enabled.
	repeated FieldType probe_types = 7;
	repeated FieldType build_types = 8;
	repeated Expr left_conditions = 9;
	repeated Expr right_conditions = 10;
	repeated Expr other_conditions = 11;
	repeated Expr other_eq_conditions_from_in = 12;
	optional bool is_null_aware_semi_join = 13;
	repeated RuntimeFilter runtime_filter_list = 14; // only used by TiFlash
}

message RuntimeFilter {
	optional int32 id = 1 [(gogoproto.nullable) = false];
	repeated Expr source_expr_list = 2;
	repeated Expr target_expr_list = 3;
	optional string source_executor_id = 4 [(gogoproto.nullable) = false];
	optional string target_executor_id = 5 [(gogoproto.nullable) = false];
	optional RuntimeFilterType rf_type = 6 [(gogoproto.nullable) = false];
	optional RuntimeFilterMode rf_mode = 7 [(gogoproto.nullable) = false];
	optional bool apply_late_materialization = 8 [(gogoproto.nullable) = false];
}

enum RuntimeFilterType {
	IN = 0;
	MIN_MAX = 1;
        BLOOM_FILTER= 2;
}

enum RuntimeFilterMode {
	LOCAL = 0;
        GLOBAL = 1;
}

message IndexScan {
	optional int64 table_id = 1 [(gogoproto.nullable) = false];
	optional int64 index_id = 2 [(gogoproto.nullable) = false];
	repeated ColumnInfo columns = 3;
	optional bool desc = 4 [(gogoproto.nullable) = false];
	optional bool unique = 5; // check whether it is a unique index.
	repeated int64 primary_column_ids = 6;
}

message Selection {
	// Where conditions.
	repeated Expr conditions = 1;
	repeated RpnExpr rpn_conditions = 2;
	optional Executor child = 3;
}

message Projection {
	// Projection expressions.
	repeated Expr exprs = 1;
	repeated RpnExpr rpn_exprs = 2;
	optional Executor child = 3;
}

message Aggregation {
	// Group by clause.
	repeated Expr group_by = 1;
	repeated RpnExpr rpn_group_by = 4;
	// Aggregate functions.
	repeated Expr agg_func = 2;
	repeated RpnExpr rpn_agg_func = 5;
	// If it is a stream aggregation.
	optional bool streamed = 3 [(gogoproto.nullable) = false];
	optional Executor child = 6;
}

message TopN {
	// Order by clause.
	repeated ByItem order_by = 1;
	optional uint64 limit = 2 [(gogoproto.nullable) = false];
	optional Executor child = 3;
	// If partition_by is not empty, it means need to return topN of each partition.
	// Generally used in sqls like `where row_number() over (partition by ... order by ...) < X`
	repeated ByItem partition_by = 4;
}

message Limit {
	// Limit the result to be returned.
	optional uint64 limit = 1 [(gogoproto.nullable) = false];
	optional Executor child = 2;
    	// If partition_by is not empty, it means need to return limitN of each partition.
    	// Generally used in sqls like `where row_number() over (partition by ...) < X`
    	repeated ByItem partition_by = 3;
}

message Kill {
	optional uint64 connID = 1 [(gogoproto.nullable) = false];

	// Query indicates whether terminate a single query on this connection or the whole connection.
	//   If Query is true, terminates the statement the connection is currently executing, but leaves the connection itself intact.
	//   If Query is false, terminates the connection associated with the given ConnectionID, after terminating any statement the connection is executing.
	//   See https://dev.mysql.com/doc/refman/8.0/en/kill.html.
	optional bool query = 2 [(gogoproto.nullable) = false];
}

message ExecutorExecutionSummary {
	// Total time cost in this executor. Includes self time cost and children time cost.
	optional uint64 time_processed_ns = 1;

	// How many rows this executor produced totally.
	optional uint64 num_produced_rows = 2;

	// How many times executor's `next()` is called.
	optional uint64 num_iterations = 3;

	// Coresponding executor id
	optional string executor_id = 4;

	// The execution concurrency for this executor
	optional uint64 concurrency = 5;

	oneof DetailInfo {
		TiFlashScanContext tiflash_scan_context = 6;
	}
}

message TiFlashExecutionInfo {
	// The execution summary of each executor, no order limitation.
	repeated ExecutorExecutionSummary execution_summaries = 1;
}

message TiFlashScanContext {
	optional uint64 total_dmfile_scanned_packs = 1;
	optional uint64 total_dmfile_skipped_packs = 2;
	optional uint64 total_dmfile_scanned_rows = 3;
	optional uint64 total_dmfile_skipped_rows = 4;
	optional uint64 total_dmfile_rough_set_index_load_time_ms = 5;
	optional uint64 total_dmfile_read_time_ms = 6;
	optional uint64 total_create_snapshot_time_ms = 7;
	optional uint64 total_local_region_num = 8;
	optional uint64 total_remote_region_num = 9;
	optional uint64 total_user_read_bytes = 10;
}


message Sort {
	repeated ByItem byItems = 1;
	optional bool isPartialSort = 2;
	optional Executor child = 3;
}

enum WindowBoundType {
	Following = 0;
	Preceding = 1;
	CurrentRow = 2;
}

// Used for range frame's comparison when finding frame's boundary
enum RangeCmpDataType {
	Int = 0;
	Float = 1;
	Decimal = 2;
}

message WindowFrameBound {
	optional WindowBoundType type = 1 [(gogoproto.nullable) = false];
	optional bool unbounded = 2 [(gogoproto.nullable) = false];
	optional uint64 offset = 3; // only use for `rows` frame type
	repeated Expr calcFuncs = 4; // Deprecated
	optional Expr frame_range = 5; // only use for `range` frame type
	optional RangeCmpDataType cmp_data_type = 6; // only use for `range` frame type
}

enum WindowFrameType {
	Rows = 0;
	Ranges = 1;
	Groups = 2;
}

message WindowFrame {
	optional WindowFrameType type = 1 [(gogoproto.nullable) = false];
	optional WindowFrameBound start = 2;
	optional WindowFrameBound end = 3;
}

message Window {
	repeated Expr func_desc = 1;
	repeated ByItem partition_by = 2;
	repeated ByItem order_by = 3;
	optional WindowFrame frame = 4;
	optional Executor child = 5;
}

message GroupingExpr {
	repeated Expr grouping_expr = 1;         // for grouping expressions like: expr[a,b]
}

message GroupingSet {
	repeated GroupingExpr grouping_exprs = 1;
}

// Deprecated in the nearly feature usage
message Expand{
	repeated GroupingSet grouping_sets = 1; // for grouping sets like: expr[a,b] and expr[c]
	optional Executor child = 2;
	optional uint64 version = 3;            // expand version
}

message ExprSlice {
	repeated Expr exprs = 1;
}

message Expand2{
	repeated ExprSlice proj_exprs = 1;           // for grouping sets generated projection levels, like [a, b, c, 1#gen_col1, 2#gen_col2]
	repeated string generated_output_names = 2;  // for output names for generated cols like grouping_id etc, like "gen_col1", "gen_col2" here
	optional Executor child = 3;
}

